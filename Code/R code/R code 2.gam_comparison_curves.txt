# R包计算声学指数双曲线 广义加性模型拟合（终，NDSI双曲线剔除前后对比，标号为（e））（3.3.2） R code 2.gam_comparison_curves

# 1. 安装并加载 showtext（可选安装）
if (!requireNamespace("showtext", quietly = TRUE)) {
  install.packages("showtext")
}
library(showtext)
showtext_auto()
font_add("Times New Roman", regular = "C:/Windows/Fonts/times.ttf")

# 2. 加载其他必要包
library(ggplot2)
library(dplyr)
library(mgcv)
library(lubridate)
library(readxl)

# 3. 定义两个 Excel 文件路径，并以命名列表存储（名称将用作图例标签）
files <- list(
  NDSI_source1 = "E:/voice_data/统计分析/声景类型和声学指数的融合分析/NDSI_清洗_平均.xlsx",
  NDSI_source2 = "E:/voice_data/声学指数结算结果/整理2/NDSI_平均.xlsx"
)

# 4. 定义预测网格：0~24 小时，共 200 个点
pred_grid <- data.frame(hour_decimal = seq(0, 24, length.out = 200))

# 5. 对每个数据源：读取、处理、拟合 GAM、预测，并合并结果
pred_all <- lapply(names(files), function(src) {
  # 5.1 读入 Excel 并处理
  df_src <- read_excel(files[[src]]) %>%
    rename(
      FILENAME = group_key,
      Value    = avg_value
    ) %>%
    mutate(
      Value         = as.numeric(Value),
      datetime_full = as.POSIXct(FILENAME, format = "%Y%m%d_%H%M"),
      datetime_min  = as.POSIXct(format(datetime_full, "%Y-%m-%d %H:%M"),
                                 format = "%Y-%m-%d %H:%M"),
      hour_decimal  = hour(datetime_min) + minute(datetime_min) / 60
    )
  
  # 5.2 拟合 GAM
  gam_model <- gam(Value ~ s(hour_decimal, bs = "cc"),
                   data   = df_src,
                   method = "REML")
  
  # 5.3 预测
  fit_vals <- predict(gam_model, newdata = pred_grid)
  
  # 5.4 返回带标签的数据框
  data.frame(
    hour_decimal = pred_grid$hour_decimal,
    fit          = fit_vals,
    Source       = src,
    stringsAsFactors = FALSE
  )
}) %>%
  bind_rows()

# 6. 绘图：背景色块 + 日出日落虚线 + 两条曲线 + 分图号 (a)
ggplot() +
  # 夜晚（深蓝）
  geom_rect(aes(xmin = 0,   xmax = 5.5,  ymin = -Inf, ymax = Inf),
            fill = "#001f3f", alpha = 0.15) +
  # 黎明（粉橙）
  geom_rect(aes(xmin = 5.5, xmax = 8.0,  ymin = -Inf, ymax = Inf),
            fill = "#fdebd0", alpha = 0.15) +
  # 黄昏（深褐）
  geom_rect(aes(xmin = 16.0, xmax = 18.5, ymin = -Inf, ymax = Inf),
            fill = "#a04000", alpha = 0.15) +
  # 夜晚（第二段）
  geom_rect(aes(xmin = 18.5, xmax = 24,   ymin = -Inf, ymax = Inf),
            fill = "#001f3f", alpha = 0.15) +
  
  # 日出 & 日落 虚线
  geom_vline(xintercept = 6,  color = "orange",
             linetype = "dashed", linewidth = 1.2, alpha = 0.7) +
  geom_vline(xintercept = 18, color = "orange",
             linetype = "dashed", linewidth = 1.2, alpha = 0.7) +
  
  # 两条 GAM 拟合曲线，不同颜色区分
  geom_line(data = pred_all,
            aes(x = hour_decimal, y = fit, color = Source),
            linewidth = 2, alpha = 0.9) +
  
  # 手动映射颜色与标签
  scale_color_manual(
    name   = "Data Source",
    values = c(
      NDSI_source1 = "#FF6F61",  # 源1 红
      NDSI_source2 = "#61DAFD"   # 源2 蓝
    ),
    labels = c(
      NDSI_source1 = "NDSI_Cleaned",
      NDSI_source2 = "NDSI_Raw"
    )
  ) +
  
  # 坐标轴设置
  scale_x_continuous(breaks = seq(0, 24, 2), limits = c(0, 24),
                     expand = expansion(mult = c(0.05, 0.05))) +
  scale_y_continuous(expand = expansion(mult = c(0.15, 0.15))) +
  
  # 添加分图号 (e) 到右下角
  annotate("text",
           x     = Inf, y     = -Inf,
           label = "(e)",
           hjust = 1.1, vjust = -0.5,
           size  = 14,
           family = "Times New Roman") +
  
  # 标签与主题
  labs(
    x     = "Hour of Day",
    y     = "NDSI",
    color = "Data Source"
  ) +
  theme_minimal(base_family = "Times New Roman") +
  theme(
    panel.grid        = element_blank(),
    axis.ticks        = element_line(color = "black", linewidth = 1),
    axis.ticks.length = unit(5, "pt"),
    panel.border      = element_rect(color = "black", fill = NA, linewidth = 1),
    axis.text.x       = element_text(size = 14),
    axis.text.y       = element_text(size = 14),
    axis.title.x      = element_text(size = 16, face = "bold"),
    axis.title.y      = element_text(size = 16, face = "bold")
  )
