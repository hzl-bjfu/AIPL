# 训练集 验证集 测试集 622 python code 5.train_val_test_splitter

import os
import random
from shutil import copy2
import pandas as pd

def data_set_split(src_data_folder, target_data_folder,
                   train_scale=0.6, val_scale=0.2, test_scale=0.2):
    """
    将 src_data_folder 下的所有类别文件夹按指定比例随机拆分到
    target_data_folder 下的 train、val、test 文件夹中。
    每个类别将分别按照同样的比例进行拆分。
    """
    # 1. 获取源数据集下所有类别名称（子文件夹）
    class_names = os.listdir(src_data_folder)
    
    # 2. 在目标目录下创建 train、val、test 三个文件夹及各类别子文件夹
    split_names = ['train', 'val', 'test']
    for split_name in split_names:
        split_path = os.path.join(target_data_folder, split_name)
        if not os.path.exists(split_path):
            os.makedirs(split_path)
        # 在 train/val/test 下为每个类别创建对应的子文件夹
        for class_name in class_names:
            class_split_path = os.path.join(split_path, class_name)
            if not os.path.exists(class_split_path):
                os.makedirs(class_split_path)

    # 3. 对每个类别进行数据划分，并输出每个类别的划分情况
    for class_name in class_names:
        current_class_data_path = os.path.join(src_data_folder, class_name)
        current_all_data = os.listdir(current_class_data_path)
        current_data_length = len(current_all_data)
        
        # 打乱索引，确保随机性
        current_data_index_list = list(range(current_data_length))
        random.shuffle(current_data_index_list)
        
        # 根据比例计算分割点
        train_stop_flag = int(current_data_length * train_scale)
        val_stop_flag = int(current_data_length * (train_scale + val_scale))
        
        # 目标文件夹路径
        train_folder = os.path.join(target_data_folder, 'train', class_name)
        val_folder   = os.path.join(target_data_folder, 'val', class_name)
        test_folder  = os.path.join(target_data_folder, 'test', class_name)
        
        # 计数器
        train_num = 0
        val_num = 0
        test_num = 0
        
        # 遍历打乱后的文件索引，并复制到相应子集
        for idx, file_index in enumerate(current_data_index_list):
            file_name = current_all_data[file_index]
            src_file_path = os.path.join(current_class_data_path, file_name)
            
            if idx < train_stop_flag:
                copy2(src_file_path, train_folder)
                train_num += 1
            elif idx < val_stop_flag:
                copy2(src_file_path, val_folder)
                val_num += 1
            else:
                copy2(src_file_path, test_folder)
                test_num += 1

        # 输出该类别的划分情况
        print(f"类别: {class_name}")
        print(f"  总数: {current_data_length}")
        print(f"  训练集: {train_num} (保存到: {train_folder})")
        print(f"  验证集: {val_num} (保存到: {val_folder})")
        print(f"  测试集: {test_num} (保存到: {test_folder})")
        print("-" * 60)

def export_statistics(target_data_folder, output_excel_path):
    """
    遍历 target_data_folder 下的 train、val、test 文件夹，
    统计每个分类文件夹中的音频文件数量，并将结果导出为 Excel 表格。
    """
    data = []
    for split in ['train', 'val', 'test']:
        split_path = os.path.join(target_data_folder, split)
        if not os.path.exists(split_path):
            continue
        # 遍历每个类别文件夹
        for class_name in os.listdir(split_path):
            class_folder = os.path.join(split_path, class_name)
            if os.path.isdir(class_folder):
                file_list = os.listdir(class_folder)
                file_count = len([f for f in file_list if os.path.isfile(os.path.join(class_folder, f))])
                data.append({
                    "数据集": split,
                    "类别": class_name,
                    "文件数量": file_count
                })
    # 将数据转为 DataFrame，并导出为 Excel 文件
    df = pd.DataFrame(data)
    df.to_excel(output_excel_path, index=False)
    print(f"统计表格已导出到: {output_excel_path}")

if __name__ == '__main__':
    # 指定输入数据集和输出目录路径
    src_data_folder = r"E:\voice_data\Beijing\data_input_numpy"   # 原始数据目录
    target_data_folder = r"E:\voice_data\Beijing\data_3dataset"     # 划分后的存放目录
    
    # 调用数据集划分函数
    data_set_split(src_data_folder, target_data_folder,
                   train_scale=0.6,  # 训练集占比
                   val_scale=0.2,    # 验证集占比
                   test_scale=0.2)   # 测试集占比
    
    # 导出统计表格，统计 train、val、test 下各类别的音频文件数量
    output_excel_path = os.path.join(target_data_folder, "result_statistics.xlsx")
    export_statistics(target_data_folder, output_excel_path)
